trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

steps:
# Paso 1: Ejecución de Pruebas Unitarias y de Integración
- task: Gradle@2
  inputs:
    workingDirectory: ''
    gradleWrapperFile: 'gradlew'
    gradleOptions: '-Xmx3072m'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '1.8'
    jdkArchitectureOption: 'x64'
    publishJUnitResults: true
    testResultsFiles: '**/TEST-*.xml'
    tasks: 'test'
  displayName: 'Ejecutar Pruebas Unitarias y de Integración'

# Paso 2: Construir y Empaquetar la Aplicación
- task: Gradle@2
  inputs:
    workingDirectory: ''
    gradleWrapperFile: 'gradlew'
    gradleOptions: '-Xmx3072m'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '1.8'
    jdkArchitectureOption: 'x64'
    tasks: 'build'
  displayName: 'Construir y Empaquetar la Aplicación'

# Paso 3: Listar Archivos en build/libs/
- script: |
    ls -l $(Build.SourcesDirectory)/build/libs/
  displayName: 'Listar Archivos en build/libs/'

# Paso 4: Construir Imagen Docker
- script: |
    docker build -t miapp .
  displayName: 'Construir Imagen Docker'

# Paso 5: Ejecutar Contenedor Docker
- script: |
    docker run -d -p 8080:8080 --name miapp miapp
  displayName: 'Ejecutar Contenedor Docker'

# Paso 6: Verificar Estado del Contenedor
- script: |
    echo "Verificando el estado del contenedor..."
    docker ps | grep miapp
  displayName: 'Verificar Estado del Contenedor'

# Paso 7: Imprimir Logs del Contenedor Docker
- script: |
    echo "Imprimiendo logs del contenedor Docker:"
    docker logs miapp
  displayName: 'Imprimir Logs del Contenedor Docker'

# Paso 8: Imprimir URL para Acceso
- script: |
    echo "La aplicación puede ser accesible en http://$(curl -s http://whatismyip.akamai.com/):8080/"
  displayName: 'Imprimir URL para Acceso'

# Paso 9: Notificar sobre el Éxito o Fallos
- script: |
    echo 'Enviando notificaciones...'

    # Ejemplo de cómo se podría enviar una notificación por correo electrónico:
    # Este es un pseudocódigo y requerirá un servicio de correo electrónico real y su API para funcionar.

    # curl -X POST -H "Authorization: Bearer tu_token_api" -H "Content-Type: application/json" \
    # -d '{
    #       "personalizations": [{"to": [{"email": "correo_del_destinatario"}]}],
    #       "from": {"email": "tu_email_de_envio"},
    #       "subject": "Notificación de Pipeline",
    #       "content": [{"type": "text/plain", "value": "El pipeline $(Build.DefinitionName) ha completado su ejecución."}]
    #     }' \
    # https://servicio_email_api/v3/mail/send

    echo 'Notificación de ejemplo enviada (pseudocódigo).'
  displayName: 'Notificar sobre el éxito o fallos en el proceso'
