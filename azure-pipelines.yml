trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

steps:
# Paso 1: Ejecución de Pruebas Unitarias y de Integración
- task: Gradle@2
  inputs:
    workingDirectory: ''
    gradleWrapperFile: 'gradlew'
    gradleOptions: '-Xmx3072m'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '1.8'
    jdkArchitectureOption: 'x64'
    publishJUnitResults: true
    testResultsFiles: '**/TEST-*.xml'
    tasks: 'test'
  displayName: 'Ejecutar Pruebas Unitarias y de Integración'

# Paso 2: Construir y Empaquetar la Aplicación
- task: Gradle@2
  inputs:
    workingDirectory: ''
    gradleWrapperFile: 'gradlew'
    gradleOptions: '-Xmx3072m'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '1.8'
    jdkArchitectureOption: 'x64'
    tasks: 'build'
  displayName: 'Construir y Empaquetar la Aplicación'

# Paso 3: Listar Archivos en build/libs/
- script: |
    ls -l $(Build.SourcesDirectory)/build/libs/
  displayName: 'Listar Archivos en build/libs/'

# Paso 4: Construir Imagen Docker
- script: |
    docker build -t miapp .
  displayName: 'Construir Imagen Docker'

# Paso 5: Ejecutar Contenedor Docker
- script: |
    docker run -d -p 8080:8080 --name miapp miapp
  displayName: 'Ejecutar Contenedor Docker'

# Paso 6: Imprimir URL para Acceso
- script: |
    echo "La aplicación puede ser accesible en http://$(curl -s http://whatismyip.akamai.com/):8080/si la IP es pública y los puertos están mapeados correctamente."
  displayName: 'Imprimir URL para Acceso'

# Paso 7: Pausa para Pruebas Manuales (5 minutos)
- script: |
    echo "Esperando 10 minutos para pruebas manuales..."
    sleep 600
  displayName: 'Pausa para Pruebas Manuales'

# Paso 8: Notificar sobre el Éxito o Fallos
- script: |
    echo 'Enviando notificaciones...'
    # Aquí iría el comando o script para enviar notificaciones por correo electrónico.
    # Esto puede requerir configuración adicional o integración con un servicio de correo electrónico.
  displayName: 'Notificar sobre el éxito o fallos en el proceso'
