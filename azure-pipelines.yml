trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

steps:
# Paso 1: Ejecución de Pruebas Unitarias y de Integración
- task: Gradle@2
  inputs:
    workingDirectory: ''
    gradleWrapperFile: 'gradlew'
    gradleOptions: '-Xmx3072m'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '1.8'
    jdkArchitectureOption: 'x64'
    publishJUnitResults: true
    testResultsFiles: '**/TEST-*.xml'
    tasks: 'test'
  displayName: 'Ejecutar Pruebas Unitarias y de Integración'

# Paso 2: Construir y Empaquetar la Aplicación
- task: Gradle@2
  inputs:
    workingDirectory: ''
    gradleWrapperFile: 'gradlew'
    gradleOptions: '-Xmx3072m'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '1.8'
    jdkArchitectureOption: 'x64'
    tasks: 'build'
  displayName: 'Construir y Empaquetar la Aplicación'

# Paso 3: Listar Archivos en build/libs/
- script: |
    ls -l $(Build.SourcesDirectory)/build/libs/
  displayName: 'Listar Archivos en build/libs/'

# Paso 4: Construir Imagen Docker
- script: |
    docker build -t miapp .
  displayName: 'Construir Imagen Docker'

# Paso 5: Ejecutar Contenedor Docker (Opcional)
- script: |
    docker run -d -p 8080:8080 --name miapp miapp
  displayName: 'Ejecutar Contenedor Docker'

# Paso 6: Notificar sobre el Éxito o Fallos
- script: |
    echo 'Enviando notificaciones...'
  displayName: 'Notificar sobre el éxito o fallos en el proceso'
